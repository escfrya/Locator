<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="../../../../t4functions.t4"#>
<#@ output extension=".cs"#>
<#
var project = GetProject("Motivator.Mobile.Presentation.WP8");
var ns = GetNamespace(project.CodeModel.CodeElements, "Motivator");
var ns1 = GetNamespace(ns.Members, "Mobile");
var ns2 = GetNamespace(ns1.Members, "Presentation");
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
foreach (CodeElement codeNamespaceElement in ns2.Members)
{

	if (codeNamespaceElement.Kind == vsCMElement.vsCMElementInterface)
	{
		CodeInterface iClass = (CodeInterface)codeNamespaceElement;
		if (IsViewInterface(iClass.Name))
		{
			var viewModel = GetViewModelClassName(iClass.Name);
			fileManager.StartNewFile(viewModel + ".g.cs");
			#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Windows.Input;
using Motivator.Mobile.WP;
using Motivator.Mobile.Presentation;
using Motivator.Mobile.WP.ViewModels;

namespace Motivator.Mobile.WP.ViewModels
{
	public partial class <#= viewModel #> : BaseViewModel<<#= GetPresenterName(iClass.Name) #>>, <#= iClass.Name #>
	{
<# foreach(CodeElement prop in iClass.Members) { 
	if (prop.Kind == vsCMElement.vsCMElementProperty) {
		CodeProperty property = (CodeProperty)prop; #>
		private <#= property.Type.AsFullName #> <#= property.Name.ToLower() #>;
        public <#= property.Type.AsFullName #> <#= property.Name #> 
        {
<# if (property.Getter != null) { #>
			get { return <#= property.Name.ToLower() #>; }
<# } #>
<# if (property.Setter != null) { #>
            set 
            { 
                <#= property.Name.ToLower() #> = value;
                OnPropertyChanged();
            }
<# } #>
        }

<# } } #>
<#	foreach (CodeElement eventEl in iClass.Members) 
	{ 
		if (eventEl.Kind == vsCMElement.vsCMElementEvent)
		{
			CodeEvent typeEvent = (CodeEvent)eventEl;
#>
		public event <#= typeEvent.Type.AsFullName #> <#= typeEvent.Name #>;
		public ICommand <#= GetCommandName(typeEvent.Name) #> { get; private set; }
		partial void <#= GetCommandMethodName(typeEvent.Name) #>(object o);
<#
		} 
	} 
#>
		
		partial void Initialize();

		public <#= viewModel #>()
		{
			Initialize();
<#	foreach (CodeElement eventEl in iClass.Members) 
	{ 
		if (eventEl.Kind == vsCMElement.vsCMElementEvent)
		{ 
			CodeEvent typeEvent = (CodeEvent)eventEl;
#>
			<#= GetCommandName(typeEvent.Name) #> = new Command(<#= GetCommandMethodName(typeEvent.Name) #>);
<# 
		} 
	}
#>

		}
	}
}
<# 
		}
	}
}
fileManager.Process(); 
#>