<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="../../../t4functions.t4"#>
<#@ output extension=".g.cs"#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Locator.Mobile.BL.Client;
using Locator.Mobile.BL.Request;
using Locator.Mobile.BL.Response;
namespace Locator.Mobile.BL.ServiceClient
{
    public class ServiceCommandFactory : IServiceCommandFactory
    {
		private readonly IRequestClient client;
		public ServiceCommandFactory(IRequestClient client)
		{
			this.client = client;
		}
<#
var project = GetProject("LocatorService");
var ns = GetNamespace(project.CodeModel.CodeElements, "LocatorService");

foreach (CodeElement codeNamespaceElement in ns.Members)
{
	if (codeNamespaceElement.Kind == vsCMElement.vsCMElementInterface)
	{
		CodeInterface codeInterface = (CodeInterface)codeNamespaceElement;
		foreach (CodeElement codeInterfaceElement in codeInterface.Members)
		{
			if (codeInterfaceElement.Kind == vsCMElement.vsCMElementFunction)
			{
				CodeFunction codeFunction = (CodeFunction)codeInterfaceElement;
				if (HasAttribute(codeFunction, "OperationContract"))
				{
					
#>
		public BaseServiceCommand<<#= GetFunctionReturnType(codeFunction.Type) #>> <#= codeFunction.Name #>(<#= GetFunctionParams(codeFunction) #>)
		{
			return new BaseServiceCommand<<#= GetFunctionReturnType(codeFunction.Type) #>> (client, new ExecuteParams
            { 
                Address = <#= GetServiceAddress(codeFunction) #>, 
                Request = <#= GetServiceRequest(codeFunction) #>,
				Type = <#= GetMethodHttpType(codeFunction) #>,
				ByteArray = <#= GetByteArrayProp(codeFunction) #>
            });
		}

<#
				}
			}
		}
	}
}
#>

	}
}

<#+
private string GetByteArrayProp(CodeFunction codeFunction)
{
	bool hasStream =  HasStreamParam(codeFunction);
	if (hasStream)
		return "bytes";
	else
		return "null";
}
#>