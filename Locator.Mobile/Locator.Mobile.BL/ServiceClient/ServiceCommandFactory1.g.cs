


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Locator.Mobile.BL.Client;
using Locator.Mobile.BL.Request;
using Locator.Mobile.BL.Response;
namespace Locator.Mobile.BL.ServiceClient
{
    public class ServiceCommandFactory : IServiceCommandFactory
    {
		private readonly IRequestClient client;
		public ServiceCommandFactory(IRequestClient client)
		{
			this.client = client;
		}
		public BaseServiceCommand<Locator.ServiceContract.Models.LocationsModel> GetLocations()
		{
			return new BaseServiceCommand<Locator.ServiceContract.Models.LocationsModel> (client, new ExecuteParams
            { 
                Address = string.Format("locations/"), 
                Request = new BaseRequest(),
				Type = HTTPType.GET,
				ByteArray = null
            });
		}

		public BaseServiceCommand<Locator.ServiceContract.Models.FriendsModel> GetFriends()
		{
			return new BaseServiceCommand<Locator.ServiceContract.Models.FriendsModel> (client, new ExecuteParams
            { 
                Address = string.Format("friends/"), 
                Request = new BaseRequest(),
				Type = HTTPType.GET,
				ByteArray = null
            });
		}

		public BaseServiceCommand<BaseResponse> SendLocation(SendLocationRequest request)
		{
			return new BaseServiceCommand<BaseResponse> (client, new ExecuteParams
            { 
                Address = string.Format("location/"), 
                Request = request,
				Type = HTTPType.POST,
				ByteArray = null
            });
		}

		public BaseServiceCommand<Locator.Entity.Entities.User> AddUser(AddUserRequest request)
		{
			return new BaseServiceCommand<Locator.Entity.Entities.User> (client, new ExecuteParams
            { 
                Address = string.Format("users/"), 
                Request = request,
				Type = HTTPType.POST,
				ByteArray = null
            });
		}

		public BaseServiceCommand<BaseResponse> UpdateUserPush(UpdateUserPushRequest request)
		{
			return new BaseServiceCommand<BaseResponse> (client, new ExecuteParams
            { 
                Address = string.Format("user_push/"), 
                Request = request,
				Type = HTTPType.POST,
				ByteArray = null
            });
		}


	}
}

